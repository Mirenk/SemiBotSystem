# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import data_manage_pb2 as data__manage__pb2
import type_pb2 as type__pb2


class DataManageStub(object):
    """
    Service: DataManage
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListLabels = channel.unary_unary(
                '/matching.DataManage/ListLabels',
                request_serializer=data__manage__pb2.ListLabelsRequest.SerializeToString,
                response_deserializer=data__manage__pb2.ListLabelsResponse.FromString,
                )
        self.ListPersonalData = channel.unary_unary(
                '/matching.DataManage/ListPersonalData',
                request_serializer=data__manage__pb2.ListPersonalDataRequest.SerializeToString,
                response_deserializer=data__manage__pb2.ListPersonalDataResponse.FromString,
                )
        self.ListTasks = channel.unary_unary(
                '/matching.DataManage/ListTasks',
                request_serializer=data__manage__pb2.ListTasksRequest.SerializeToString,
                response_deserializer=data__manage__pb2.ListTasksResponse.FromString,
                )
        self.GetTaskFromName = channel.unary_unary(
                '/matching.DataManage/GetTaskFromName',
                request_serializer=data__manage__pb2.GetTaskFromNameRequest.SerializeToString,
                response_deserializer=type__pb2.Task.FromString,
                )
        self.GetTaskRequestHistories = channel.unary_unary(
                '/matching.DataManage/GetTaskRequestHistories',
                request_serializer=type__pb2.Label.SerializeToString,
                response_deserializer=data__manage__pb2.GetTaskRequestHistoriesResponse.FromString,
                )
        self.GetPersonalDataFromId = channel.unary_unary(
                '/matching.DataManage/GetPersonalDataFromId',
                request_serializer=data__manage__pb2.GetPersonalDataFromIdRequest.SerializeToString,
                response_deserializer=type__pb2.PersonalData.FromString,
                )
        self.RecordTaskRequestHistory = channel.unary_unary(
                '/matching.DataManage/RecordTaskRequestHistory',
                request_serializer=data__manage__pb2.RecordTaskRequestHistoryRequest.SerializeToString,
                response_deserializer=data__manage__pb2.RecordTaskRequestHistoryResult.FromString,
                )


class DataManageServicer(object):
    """
    Service: DataManage
    """

    def ListLabels(self, request, context):
        """候補者抽出用
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListPersonalData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTasks(self, request, context):
        """マッチング記録取得用
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaskFromName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaskRequestHistories(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPersonalDataFromId(self, request, context):
        """マッチング結果記録
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecordTaskRequestHistory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataManageServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListLabels': grpc.unary_unary_rpc_method_handler(
                    servicer.ListLabels,
                    request_deserializer=data__manage__pb2.ListLabelsRequest.FromString,
                    response_serializer=data__manage__pb2.ListLabelsResponse.SerializeToString,
            ),
            'ListPersonalData': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPersonalData,
                    request_deserializer=data__manage__pb2.ListPersonalDataRequest.FromString,
                    response_serializer=data__manage__pb2.ListPersonalDataResponse.SerializeToString,
            ),
            'ListTasks': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTasks,
                    request_deserializer=data__manage__pb2.ListTasksRequest.FromString,
                    response_serializer=data__manage__pb2.ListTasksResponse.SerializeToString,
            ),
            'GetTaskFromName': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTaskFromName,
                    request_deserializer=data__manage__pb2.GetTaskFromNameRequest.FromString,
                    response_serializer=type__pb2.Task.SerializeToString,
            ),
            'GetTaskRequestHistories': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTaskRequestHistories,
                    request_deserializer=type__pb2.Label.FromString,
                    response_serializer=data__manage__pb2.GetTaskRequestHistoriesResponse.SerializeToString,
            ),
            'GetPersonalDataFromId': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPersonalDataFromId,
                    request_deserializer=data__manage__pb2.GetPersonalDataFromIdRequest.FromString,
                    response_serializer=type__pb2.PersonalData.SerializeToString,
            ),
            'RecordTaskRequestHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.RecordTaskRequestHistory,
                    request_deserializer=data__manage__pb2.RecordTaskRequestHistoryRequest.FromString,
                    response_serializer=data__manage__pb2.RecordTaskRequestHistoryResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'matching.DataManage', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DataManage(object):
    """
    Service: DataManage
    """

    @staticmethod
    def ListLabels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/matching.DataManage/ListLabels',
            data__manage__pb2.ListLabelsRequest.SerializeToString,
            data__manage__pb2.ListLabelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListPersonalData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/matching.DataManage/ListPersonalData',
            data__manage__pb2.ListPersonalDataRequest.SerializeToString,
            data__manage__pb2.ListPersonalDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/matching.DataManage/ListTasks',
            data__manage__pb2.ListTasksRequest.SerializeToString,
            data__manage__pb2.ListTasksResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTaskFromName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/matching.DataManage/GetTaskFromName',
            data__manage__pb2.GetTaskFromNameRequest.SerializeToString,
            type__pb2.Task.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTaskRequestHistories(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/matching.DataManage/GetTaskRequestHistories',
            type__pb2.Label.SerializeToString,
            data__manage__pb2.GetTaskRequestHistoriesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPersonalDataFromId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/matching.DataManage/GetPersonalDataFromId',
            data__manage__pb2.GetPersonalDataFromIdRequest.SerializeToString,
            type__pb2.PersonalData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RecordTaskRequestHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/matching.DataManage/RecordTaskRequestHistory',
            data__manage__pb2.RecordTaskRequestHistoryRequest.SerializeToString,
            data__manage__pb2.RecordTaskRequestHistoryResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
